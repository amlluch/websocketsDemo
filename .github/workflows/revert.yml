name: Revert last release

on:
  push:
    tags:
      - revert

jobs:
  setup:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install GitHub CLI
        run: |
          curl -sSL https://github.com/cli/cli/releases/download/v2.0.0/gh_2.0.0_linux_amd64.tar.gz \
          | sudo tar xz -C /usr/local/bin --strip-components=2 gh_2.0.0_linux_amd64/bin/gh

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Set prefix and branch
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        id: set_prefix
        run: |
          git fetch

          TAG_NAME=${GITHUB_REF##*/}
          COMMIT_HASH=$(gh api repos/${{ github.repository }}/releases/tags/$TAG_NAME --jq '.target_commitish')
          BRANCHES=$(git branch -r --contains "$BRANCH_NAME@{0}")

          BRANCH_NAME=$(echo $BRANCHES | cut -d'/' -f 2)

          if [[ "$BRANCH_NAME" == "master" ]]; then
            echo "prefix=r" >> $GITHUB_ENV
          elif [[ "$BRANCH_NAME" == "test" ]]; then
            echo "prefix=t" >> $GITHUB_ENV
          else
            echo "prefix=d" >> $GITHUB_ENV
          fi
          echo "branch=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Write branch to file
        run: |
          echo ${{ env.branch }} > branch.txt

      - name: Upload branch as artifact
        uses: actions/upload-artifact@v2
        with:
          name: branch
          path: branch.txt

      - name: Get latest and previous tag
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        run: |
          # Get the latest release tag
          git fetch
          git fetch --tags
          latest_tag=$(gh release list --repo ${{ github.repository }} | grep "^${{ env.prefix }}" | grep -v "revert" | cut -f1 | sort --version-sort | tail -n1)
          previous_tag=$(gh release list --repo ${{ github.repository }} |  grep "^${{ env.prefix }}" | grep -v "revert" | cut -f1 | sort --version-sort | tail -n 2 | head -n 1)
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV
          echo "previous_tag=$previous_tag" >> $GITHUB_ENV
          
          echo "Previous tag is $previous_tag"

      - name: Write latest tag to file
        run: |
          echo ${{ env.latest_tag }} > latest_tag.txt

      - name: Upload latest_tag as artifact
        uses: actions/upload-artifact@v2
        with:
          name: latest_tag
          path: latest_tag.txt

      - name: Get commits and check changes
        id: check_changes
        run: |
          previous_release_sha=$(git rev-parse ${{ env.previous_tag }})
          latest_commit_sha=$(git rev-parse HEAD)
          commit_shas=$(git rev-list $previous_release_sha..$latest_commit_sha)
          
          changes_in_src="false"
          changes_in_poetry_lock="false"
          commits_list=""
          
          for commit_sha in $commit_shas; do
            changed_files=$(git diff --name-only $commit_sha^..$commit_sha)
            if echo "$changed_files" | grep -q -e "^src/"; then
              changes_in_src="true"
            fi
            if echo "$changed_files" | grep -q -e "^poetry.lock$"; then
              changes_in_poetry_lock="true"
            fi
            commits_list+="$commit_sha "
          done
          
          echo "src_changed=$changes_in_src" >> $GITHUB_ENV
          echo "dependencies_changed=$changes_in_poetry_lock" >> $GITHUB_ENV
          echo "commits_list=$commits_list" >> $GITHUB_ENV

      - name: Write dependencies_changed to file
        run: |
          echo ${{ env.dependencies_changed }} > dependencies_changed.txt

      - name: Upload dependencies_changed as artifact
        uses: actions/upload-artifact@v2
        with:
          name: dependencies_changed
          path: dependencies_changed.txt

      - name: Write src_changed to file
        run: |
          echo ${{ env.src_changed }} > src_changed.txt

      - name: Upload src_changed as artifact
        uses: actions/upload-artifact@v2
        with:
          name: src_changed
          path: src_changed.txt

      - name: Write commits list to file
        run: |
          echo ${{ env.commits_list }} > commits_list.txt

      - name: Upload commits list as artifact
        uses: actions/upload-artifact@v2
        with:
          name: commits_list
          path: commits_list.txt

      - name: Cleanup input tag
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        if: always()
        run: |
          echo "This is the cleanup step"
          input_tag=$(basename $GITHUB_REF)
          release_id=$(gh api repos/${{ github.repository }}/releases/tags/$input_tag | jq .id)

          gh api -X DELETE /repos/${{ github.repository }}/releases/$release_id
          gh api -X DELETE /repos/${{ github.repository }}/git/refs/tags/$input_tag

  revert:
    needs: [setup]
    runs-on: ubuntu-latest
    steps:

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install GitHub CLI
        run: |
          curl -sSL https://github.com/cli/cli/releases/download/v2.0.0/gh_2.0.0_linux_amd64.tar.gz \
          | sudo tar xz -C /usr/local/bin --strip-components=2 gh_2.0.0_linux_amd64/bin/gh

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: commits_list

      - name: Read commits_list
        run: |
          COMMITS_LIST=$(cat commits_list.txt)
          echo "commits_list=$COMMITS_LIST" >> $GITHUB_ENV

      - name: Revert commits
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "GitHub Actions"
          
          IFS=' ' read -ra commits <<< "${{ env.commits_list }}"
          for i in "${!commits[@]}"; do
            commit=${commits[$i]}
            git revert --no-edit $commit || exit 1
          done
          
          #git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}
          git push origin master
