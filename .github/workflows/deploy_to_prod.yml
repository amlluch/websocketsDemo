name: Build and Test

on:
  push:
    tags:
      - patch*
      - minor*
      - major*

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install GitHub CLI
        run: |
          curl -sSL https://github.com/cli/cli/releases/download/v2.0.0/gh_2.0.0_linux_amd64.tar.gz | sudo tar xz -C /usr/local/bin --strip-components=2 gh_2.0.0_linux_amd64/bin/gh

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Set prefix and branch
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        id: set_prefix
        run: |
          git branch --show-current
          COMMIT_HASH=$(gh api repos/:owner/:repo/releases/tags/:tag --jq '.target_commitish')
          BRANCHES=$(git branch -r --contains "$COMMIT_HASH")
          echo "Las ramas $BRANCHES"
          
          BRANCH_NAME=${GITHUB_REF##*/}
          echo "El nombre del branch es $BRANCH_NAME"
          branch=$(git branch --contains "$BRANCH_NAME")
          echo "Pero deberia ser esta $branch"
          if [[ "$BRANCH_NAME" == "master" ]]; then
            echo "prefix=r" >> $GITHUB_ENV
          elif [[ "$BRANCH_NAME" == "test" ]]; then
            echo "prefix=t" >> $GITHUB_ENV
          else
            echo "prefix=d" >> $GITHUB_ENV
          fi

      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        run: |
        
          input_tag=$(basename $GITHUB_REF)
          
          # Get the latest release tag
          git fetch
          latest_tag=$(gh release list --repo ${{ github.repository }} | grep "^${{ env.prefix }}" | cut -f1 | sort --version-sort | tail -n1)
          
          # Extract the current version number
          base_string=$(echo ${latest_tag:-"${{ env.prefix }}0.0.0"} | cut -c2-)
          base_array=($(echo "$base_string" | tr '.' '\n'))
          v_major=${base_array[0]}
          v_minor=${base_array[1]}
          v_patch=${base_array[2]}
          
          # Create a new tag based on the input
          if [[ $input_tag == 'major'* ]]; then
            v_major=$((v_major+1))
            v_minor=0
            v_patch=0
          elif [[ $input_tag == 'patch'* ]]; then
            v_patch=$((v_patch+1))
          elif [[ $input_tag == 'minor'* ]]; then
            v_minor=$((v_minor+1))
            v_patch=0
          else
            echo "Invalid input tag"
            gh api -X DELETE /repos/${{ github.repository }}/git/refs/tags/$input_tag
            exit 1
          fi
          
          new_tag="${{ env.prefix }}$v_major.$v_minor.$v_patch"
          
          # Check if the new tag already exists
          if gh release view $new_tag; then
            echo "Tag $new_tag already exists, exiting"
            gh api -X DELETE /repos/${{ github.repository }}/git/refs/tags/$input_tag
            exit 1
          fi
          
          # Delete the input tag and the release
          echo "Deleting tag $input_tag and release $release_id"
          release_id=$(gh api repos/${{ github.repository }}/releases/tags/$input_tag | jq .id)
          
          gh api -X DELETE /repos/${{ github.repository }}/releases/$release_id
          gh api -X DELETE /repos/${{ github.repository }}/git/refs/tags/$input_tag
          
          # Create and publish a new release with the new tag
          echo "The new release is $new_tag"
          gh release create $new_tag -t "$new_tag" -n "Notes for release $new_tag"
          

  test:
    needs: [setup]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Set up Python Environment
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    - name: Poetry Install
      uses: knowsuchagency/poetry-install@v2
      with:
        create-virtualenv: true
    - name: Install Dependencies
      run: |
        poetry install
    - name: Run Tests
      run: |
        poetry run pytest tests/

  deploy:
    needs: [ test ]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set prefix
        id: set_prefix
        run: |
          BRANCH_NAME=${GITHUB_REF##*/}
          if [[ "$BRANCH_NAME" == "master" ]]; then
            echo "prefix=r" >> $GITHUB_ENV
          elif [[ "$BRANCH_NAME" == "test" ]]; then
            echo "prefix=t" >> $GITHUB_ENV
          else
            echo "prefix=d" >> $GITHUB_ENV
          fi

      - name: Check if src has changed
        id: check_changes
        run: |
          # Get the tags for the last two releases
          
          git fetch
          LATEST_TAG=$(git tag | grep "^${{ env.prefix }}" | sort -V | tail -n 1 | head -n 1)
          PREVIOUS_TAG=$(git tag |  grep "^${{ env.prefix }}" | sort -V | tail -n 2 | head -n 1)
          echo "previa para src $PREVIOUS_TAG"
          echo "ultima para src $LATEST_TAG"

          # Compare the tags and set CHANGED
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "src_changed=true" >> $GITHUB_ENV
            exit 0
          fi

          if [ "$LATEST_TAG" != "$PREVIOUS_TAG" ]; then
            CHANGED=$(git diff --name-only $PREVIOUS_TAG $LATEST_TAG -- src)
          fi
          if [ -n "$CHANGED" ]; then
            echo "src_changed=true" >> $GITHUB_ENV
          else
            echo "src_changed=false" >> $GITHUB_ENV
          fi

      - name: Generate zip for code
        if: env.src_changed == 'true'
        run: |
          zip -r lambda_code.zip src

      - name: Check if poetry.lock has changed
        id: check_lockfile_changes
        run: |
          # Get the tags for the last two releases
          
          git fetch
          LATEST_TAG=$(git tag | grep "^${{ env.prefix }}" | sort -V | tail -n 1 | head -n 1)
          PREVIOUS_TAG=$(git tag | grep "^${{ env.prefix }}" | sort -V | tail -n 2 | head -n 1)
          echo "previa $PREVIOUS_TAG"
          echo "ultima $LATEST_TAG"
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "src_changed=true" >> $GITHUB_ENV
            exit 0
          fi
          if [ "$LATEST_TAG" != "$PREVIOUS_TAG" ]; then
            CHANGED=$(git diff --name-only $PREVIOUS_TAG $LATEST_TAG -- poetry.lock)
          fi
          echo "Cambios $CHANGED"
          if [ -n "$CHANGED" ]; then
            echo "lockfile_changed=true" >> $GITHUB_ENV
          else
            echo "lockfile_changed=false" >> $GITHUB_ENV
          fi

      - name: Set up Python Environment
        if: env.lockfile_changed == 'true'
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Poetry Install
        if: env.lockfile_changed == 'true'
        uses: knowsuchagency/poetry-install@v2

      - name: Export requirements
        if: env.lockfile_changed == 'true'
        run: |
          poetry export -f requirements.txt -o requirements.txt
          echo "Requirements list"
          cat requirements.txt

      - name: Install requirements in file
        if: env.lockfile_changed == 'true'
        run: |
          mkdir -p python
          pip install -r requirements.txt -t python
          zip -r dependencies_layer.zip python  >/dev/null
          cd ..

      - name: Get repository name
        run: echo "REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d '/' -f2)" >> $GITHUB_ENV

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Copy code to s3
        if: env.src_changed == 'true'
        uses: prewk/s3-cp-action@v2
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          source: 'lambda_code.zip'
          dest: 's3://lambda-code-tests/${{ env.REPO_NAME }}/lambda_code.zip'
          aws_region: 'eu-west-1'

      - name: Get bucket code version Id
        run: |
          VERSION_ID=$(aws s3api list-object-versions --bucket lambda-code-tests \
          --prefix ${{ env.REPO_NAME }}/lambda_code.zip \
          --query 'Versions[?IsLatest==`true`].VersionId' --output text)
          echo "VERSION_ID=$VERSION_ID" >> $GITHUB_ENV

      - name: Copy dependencies to s3
        if: env.lockfile_changed == 'true'
        uses: prewk/s3-cp-action@v2
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          source: 'dependencies_layer.zip'
          dest: 's3://lambda-dependencies-test/${{ env.REPO_NAME }}/dependencies_layer.zip'
          aws_region: 'eu-west-1'

      - name: Get bucket dependencies version Id
        run: |
          DEPENDENCIES_ID=$(aws s3api list-object-versions --bucket lambda-dependencies-test \
          --prefix ${{ env.REPO_NAME }}/dependencies_layer.zip \
          --query 'Versions[?IsLatest==`true`].VersionId' --output text)
          echo "DEPENDENCIES_ID=$DEPENDENCIES_ID" >> $GITHUB_ENV

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: Set stage variable
        shell: bash
        run: |
          BRANCH="${{ steps.extract_branch.outputs.branch }}"
          if [ "$BRANCH" = "master" ]; then
            echo "STAGE=prod" >> $GITHUB_ENV
          elif [ "$BRANCH" = "dev" ] || [ "$BRANCH" = "test" ]; then
            echo "STAGE=$BRANCH" >> $GITHUB_ENV
          else
            echo "STAGE=dev" >> $GITHUB_ENV
          fi

      - name: Deploy to AWS CloudFormation
        run: |
          aws cloudformation deploy --template-file cloudformation/template.yml \
          --stack-name '${{ env.REPO_NAME }}' \
          --capabilities CAPABILITY_IAM \
          --parameter-overrides RepoName='${{ env.REPO_NAME }}' LambdaCodeVersion='${{ env.VERSION_ID }}' \
          LambdaLayerVersion='${{ env.DEPENDENCIES_ID }}' Stage='${{ env.STAGE }}'
