AWSTemplateFormatVersion: "2010-09-09"
Description: WebSocket API with connect and disconnect Lambda functions

Parameters:
  RepoName:
    Type: String
    Description: The name of the GitHub repository

Resources:
  ConnectLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: src.lambda.connect.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: lambda-code-tests
        S3Key: "websocketsDemo/lambda_code.zip"
      Runtime: python3.9
      Layers:
        - !Ref DependenciesLambdaLayer

  DisconnectLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: src.lambda.disconnect.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: lambda-code-tests
        S3Key: "websocketsDemo/lambda_code.zip"
      Runtime: python3.9
      Layers:
        - !Ref DependenciesLambdaLayer

  DefaultLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: src.lambda.default.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: lambda-code-tests
        S3Key: "websocketsDemo/lambda_code.zip"
      Runtime: python3.9
      Layers:
        - !Ref DependenciesLambdaLayer

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess

  ConnectLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ConnectLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*"

  DisconnectLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt DisconnectLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*"

  DefaultLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt DefaultLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*"

  DependenciesLambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: lambda-dependencies
      CompatibleRuntimes:
        - python3.9
      Content:
        S3Bucket: lambda-dependencies-test
        S3Key: "websocketsDemo/dependencies_layer.zip"

  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: WebSocketAPI
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      Target: !Sub "integrations/${ConnectIntegration}"

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      Target: !Sub "integrations/${DisconnectIntegration}"

  DefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $default
      AuthorizationType: NONE
      Target: !Sub "integrations/${DefaultIntegration}"

  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectLambda.Arn}/invocations"

  DisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DisconnectLambda.Arn}/invocations"

  DefaultIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      Description: Default Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DefaultLambda.Arn}/invocations"

  WebSocketApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref WebSocketApi
      StageName: dev
      Description: Development Stage
      DefaultRouteSettings:
        LoggingLevel: INFO
        DataTraceEnabled: true

Outputs:
  WebSocketURI:
    Description: "WebSocket URI"
    Value: !Sub "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com"
